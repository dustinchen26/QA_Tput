修改底下html，請在輸入框增加範例
example as below:
------------------------------------------------------------
Server listening on UDP port 16732
Receiving 1470 byte datagrams
UDP buffer size:  208 KByte (default)
------------------------------------------------------------
[  3] local 10.205.102.25 port 16732 connected with 10.205.164.17 port 54719 (peer 2.1.0-rc)
[ ID] Interval       Transfer     Bandwidth        Jitter   Lost/Total Datagrams
[  3]  0.0- 1.0 sec  2.89 MBytes  24.3 Mbits/sec   0.604 ms    4/ 2171 (0.18%)
[  3] 0.00-1.00 sec  1 datagrams received out-of-order
[  3]  1.0- 2.0 sec  2.50 MBytes  21.0 Mbits/sec   0.550 ms    4/ 1880 (0.21%)
[  3]  2.0- 3.0 sec  2.67 MBytes  22.4 Mbits/sec   0.608 ms    1/ 1999 (0.05%)
[  3]  3.0- 4.0 sec  2.67 MBytes  22.4 Mbits/sec   0.593 ms    0/ 1998 (0%)
[  3]  4.0- 5.0 sec  2.83 MBytes  23.7 Mbits/sec   0.556 ms    3/ 2123 (0.14%)
[  3]  5.0- 6.0 sec  2.52 MBytes  21.1 Mbits/sec   0.558 ms    2/ 1888 (0.11%)

html如下
<!-- 
  Copyright © [2023] [Dustin_Chen]. All rights reserved.
  Author: Dustin_Chen
  Email:  Dustin_Chen@compal.com or chuhpsdustin@gmail.com
-->

<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QA_Tput</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            line-height: 0.5;
            font-size: 14px;
            font-family: Roboto, sans-serif;
            white-space: nowrap;
            overflow-x: auto;
        }
        
        textarea {
            width: 70%;
            height: 150px;
            margin-bottom: 10px;
        }

        canvas {
            margin-bottom: 0;  /* 減小圖表之間的間距 */
            width: 100% !important;  
            height: 300px; 
        }

        #chartsContainer {
            width: 80%;
            max-width: 1500px;
            margin: 0 auto;
            display: flex;
            flex-wrap: wrap; 
            justify-content: space-between; 
        }

        .chartRow {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin-bottom: 5px; /* 減小每行圖表之間的間距 */
        }

        .chartItem {
            width: 48%; 
        }

        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }

        /* Optional: Style for the chart titles to reduce space */
        .chartTitle {
            margin-bottom: 2px; /* Reduce space between the title and chart */
        }
    </style>
</head>
<body>

    <h2>QA_Tput</h2>
    <p style="margin: 0;">Author: Dustin_Chen, email: <a href="mailto:Dustin_Chen@compal.com"
            style="line-height: 1;">Dustin_Chen@compal.com</a> or <a href="mailto:chuhpsdustin@gmail.com"
            style="line-height: 1;">chuhpsdustin@gmail.com</a></p>
        
    <p>● Please paste the 5-great Report ex:"20241116-224559_B_UE1_temp.log" including iperf data and push draw</p>
    
    <textarea id="logInput"></textarea><br>
    <button onclick="generateChart()">draw</button>

    <div id="chartsContainer"></div>

    <script>
        function parseLog(log) {
            const regex = /\[\s*\d+\]\s+([\d\.]+\-\s*[\d\.]+\s+sec)\s+[\d\.]+\s+MBytes\s+([\d\.]+)\s+Mbits\/sec/;
            const data = [];
            const lines = log.split('\n');
            let currentServerData = [];
            let seenIntervals = new Set();
            let currentServerPort = null;
            let parsingData = false;
            let currentTime = null;

            console.log('開始解析日誌數據...');
            lines.forEach((line, index) => {
                console.log(`處理第 ${index + 1} 行: ${line}`);

                if (line.includes('Client connecting to')) {
                    console.log('發現 "Client connecting to"，跳過此段日誌');
                    parsingData = false;
                    return;
                }

                if (line.includes('Server listening on UDP port')) {
                    if (currentServerData.length > 0) {
                        console.log(`保存伺服器數據，端口: ${currentServerPort}`);
                        data.push({ serverPort: currentServerPort, serverData: currentServerData, time: currentTime });
                    }
                    currentServerData = [];
                    seenIntervals = new Set();

                    const portMatch = line.match(/Server listening on UDP port (\d+)/);
                    if (portMatch) {
                        currentServerPort = portMatch[1];
                        console.log(`發現伺服器開放在端口: ${currentServerPort}`);
                    }

                    parsingData = true;

                    // 提取時間 (在這裡開始尋找與該伺服器相關的時間)
                    currentTime = findLastTime(lines, index);
                    console.log(`發現時間: ${currentTime}`);
                    return;
                }

                if (parsingData) {
                    const match = line.match(regex);
                    if (match) {
                        const interval = match[1];
                        let tput = parseFloat(match[2]);

                        tput = tput;

                        seenIntervals.add(interval);
                        currentServerData.push({
                            interval: interval,
                            tput: tput
                        });
                    } else {
                        console.log('未匹配到正確的數據');
                    }
                }
            });

            if (currentServerData.length > 0) {
                console.log(`保存最後一個伺服器的數據，端口: ${currentServerPort}`);
                data.push({ serverPort: currentServerPort, serverData: currentServerData, time: currentTime });
            }

            console.log('解析完成，提取的數據:', data);
            return data;
        }

        function findLastTime(lines, index) {
            const timeRegex = /(\d{4}\/\d{2}\/\d{2} \S+ \d{2}:\d{2}:\d{2})/;
            for (let i = index - 1; i >= 0; i--) {
                const line = lines[i];
                const match = line.match(timeRegex);
                if (match) {
                    return match[1];
                }
            }
            return null;
        }

        function generateChart() {
            const log = document.getElementById('logInput').value.trim();
            if (!log) {
                alert('請輸入日誌數據');
                return;
            }

            const parsedData = parseLog(log);

            if (parsedData.length === 0) {
                alert('未能解析出任何有效的數據');
                return;
            }

            document.getElementById('chartsContainer').innerHTML = '';

            let chartRow;
            parsedData.forEach((serverData, index) => {
                if (index % 2 === 0) {
                    chartRow = document.createElement('div');
                    chartRow.className = 'chartRow';
                    document.getElementById('chartsContainer').appendChild(chartRow);
                }

                const canvas = document.createElement('canvas');
                canvas.id = `chart${index + 1}`;
                const chartItem = document.createElement('div');
                chartItem.className = 'chartItem';
                chartItem.appendChild(canvas);

                // Create and append the chart title element
                const chartTitle = document.createElement('h3');
                chartTitle.className = 'chartTitle';
                chartTitle.textContent = `Time: ${serverData.time}`;
                chartItem.insertBefore(chartTitle, canvas);  // Add the title before the canvas
                chartRow.appendChild(chartItem);

                new Chart(canvas, {
                    type: 'line',
                    data: {
                        labels: serverData.serverData.map(d => d.interval),
                        datasets: [{
                            label: `Tput (Mbits/sec) - Port ${serverData.serverPort}`,
                            data: serverData.serverData.map(d => d.tput),
                            borderColor: 'rgb(75, 192, 192)',
                            fill: false,
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,              
                        maintainAspectRatio: true,     
                        scales: {
                            x: { 
                                title: { 
                                    display: true, 
                                    text: 'Time (sec)',
                                    font: { size: 16 }
                                }
                            },
                            y: { 
                                title: { 
                                    display: true, 
                                    text: 'Tput (Mbits/sec)', 
                                    font: { size: 16 }
                                },
                                ticks: {
                                    font: { size: 16 }
                                }
                            }
                        },
                        plugins: {
                            title: {
                                display: false, // Remove default chart title
                            },
                            legend: {
                                labels: {
                                    font: {
                                        size: 16
                                    }
                                }
                            }
                        }
                    }
                });
            });
        }
    </script>

</body>
</html>
